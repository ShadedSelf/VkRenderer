#version 460
#extension GL_ARB_separate_shader_objects : enable
#include "structures.glsl"
#include "globals.glsl"
#include "quaternions.glsl"
#include "sampling.glsl"
#include "debounce.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

Ray ray(vec3 ro, vec3 rd)
{
	Ray res;
	res.ro = ro;
	res.rd = rd;
	return res;
}

void initRays(vec2 uv, out Ray ray, out vec3 planePos)
{
	ray.ro = Cam.pos;
	vec3 right = Cam.right;
	vec3 up = Cam.up;
	vec3 fw = Cam.fw;
	planePos = (ray.ro + fw + (right * uv.x + up * uv.y));
	ray.rd = normalize(planePos - ray.ro);

	// ray.ro = cam.pos;
	// vec3 right = cam.right;
	// vec3 up = qMulVec(UP, createRotation(right, cam.up.x));
	// vec3 fw = qMulVec(cam.fw, createRotation(up, uv.x * PI));

	// right = cross(fw, up);
	// fw = qMulVec(fw, createRotation(right, uv.y * PI));

	// planePos = ray.ro + fw;
	// ray.rd = normalize(planePos - ray.ro);
}

void main()
{
	ivec2 dim = imageSize(render);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(dim.xy);
	vec2 screen = (uv - .5);
	screen *= 2.0;
    screen.y *= (dim.y / dim.x);

	Ray mainRay;
	pixelID = gl_GlobalInvocationID.x + dim.x * gl_GlobalInvocationID.y;

	vec3 planePos;
	initRays(screen, mainRay, planePos);

	// vec3 fP = mainRay.ro + mainRay.rd * 3.0;
	// vec2 tri = get(pixelID + dim.x * dim.y * frame);
	// const float aperture = 0.0;
	// vec3 rO = mainRay.ro + (cam.right * tri.x * aperture) + (qMulVec(UP, createRotation(cam.right, cam.up.x)) * tri.y * aperture);
	// mainRay.ro = rO;
	// mainRay.rd = normalize(fP - rO);

	// mainRay.rd += randomSphereDirection(ihash(int(pixelID + dim.x * dim.y * frame * 8))) * 0.002;
	// mainRay.rd = normalize(mainRay.rd);

	Bounce self;

	encodeRay(self, mainRay);
	encodeFrame(self, 0);
	encodeColor(self, ONE);
	encodeIsDone(self, false);
	encodeBounceCount(self, 0);

	Bounces.data[pixelID] = self;
	Rays.data[pixelID] = mainRay;
	Accum.data[pixelID] = vec4(0.0);
	// imageStore(render, ivec2(gl_GlobalInvocationID.xy), vec4(Globals.time));
}
